name: Cloud Security Assessment Pipeline

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 0 * * *'  # Daily compliance scan at midnight

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trivy Container Scan
        uses: aquasec/trivy-action@master
        with:
          image-ref: '${{ vars.CLIENT_IMAGE }}'  # Set in repo variables (e.g., "nginx:latest")
          format: 'json'
          output: 'trivy-container-results.json'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

      - name: Trivy IaC Scan
        run: |
          trivy config --severity CRITICAL,HIGH --format json --output trivy-iac-results.json ./iac/

  checkov-scan:
    runs-on: ubuntu-latest
    needs: [trivy-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkov IaC Compliance
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./iac/
          output_format: json
          output_file_path: checkov-results.json
          framework: 'terraform,cloudformation,kubernetes'  # Auto-detect IaC type

  scout-suite:
    runs-on: ubuntu-latest
    needs: [trivy-scan]
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}  # Manual/daily runs
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scout Suite Compliance Audit
        run: |
          docker run -v $(pwd):/app/scoutsuite-results \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} \
            scoutsuite/scoutsuite scout.py aws  # Replace "aws" with "azure" or "gcp"

  ai-remediation:
    runs-on: ubuntu-latest
    needs: [trivy-scan, checkov-scan]
    steps:
      - name: Generate AI Fixes
        run: |
          pip install openai
          python3 scripts/ai-remediation.py \
            --trivy trivy-*-results.json \
            --checkov checkov-results.json
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  report:
    runs-on: ubuntu-latest
    needs: [ai-remediation, scout-suite]
    steps:
      - name: Generate Consolidated Report
        run: |
          python3 scripts/generate-report.py \
            --trivy trivy-*-results.json \
            --checkov checkov-results.json \
            --scout scoutsuite-results/scoutsuite-results*.js
        env:
          CLIENT_NAME: '${{ vars.CLIENT_NAME }}'  # Set in repo variables (e.g., "Client ABC")

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: report.html

      - name: Notify Client
        if: ${{ failure() || success() }}  # Always notify
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "Security scan completed for ${{ vars.CLIENT_NAME }}. Report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"