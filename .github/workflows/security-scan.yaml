name: Cloud Security Assessment Pipeline

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Scan Type (full, iac-only, compliance-only, container-only, policy-only)' # ‚úÖ Choose scan type depending on assessment type
        required: true
        default: 'full'
      clients:
        description: 'Comma-separated list of client names (e.g., client-a,client-b)' # ‚úÖ Clients to scan (currently static matrix below)
        required: true
        default: 'test-client'
      resource_groups:
        description: 'Comma-separated list of resource groups/projects (e.g., rg-a,rg-b)' # ‚úÖ Matching resource groups/accounts
        required: true
        default: 'test-rg'

env:
  SCAN_TYPE: ${{ github.event.inputs.scan_type }}

jobs:
  security-scan:
    runs-on: ubuntu-latest

    # ‚úÖ UPDATE THIS SECTION TO ADD CLIENT/RESOURCE GROUP PAIRS FOR EACH NEW CLIENT ASSESSMENT
    strategy:
      matrix:
        include:
          - client: client-a              # üîÅ Replace 'client-a' with actual client name
            resource_group: rg-a          # üîÅ Replace 'rg-a' with client's resource group/account
          - client: client-b
            resource_group: rg-b
    # ‚ö†Ô∏è Add or remove client-resource_group pairs as needed

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ‚úÖ Tool Installations (Trivy, Conftest, Steampipe, Python)
      - name: Install Tools (Trivy, OPA, Conftest, Python, WeasyPrint)
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.42.0
          
      # ‚úÖ Install Conftest for OPA
          curl -L https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz | tar xz
          chmod +x conftest && sudo mv conftest /usr/local/bin/

      # ‚úÖ Install Steampipe
          curl -sSL https://steampipe.io/install | sh

      # ‚úÖ Install Python and WeasyPrint
          sudo apt update && sudo apt install -y python3 python3-pip libpangocairo-1.0-0
          pip3 install openai weasyprint jinja2

      # ‚úÖ IaC Security Scans (Checkov + Regula)
      - name: Checkov IaC Security Scan
        if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'iac-only'
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./iac/
          output_format: json
          output_file_path: results/checkov-results.json

      - name: Regula Terraform Compliance Scan
        if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'iac-only'
        run: |
          curl -sSL https://github.com/fugue/regula/releases/download/v3.1.0/regula-linux-amd64.tar.gz | tar xz
          ./regula run ./iac/ --format json > results/regula-results.json || echo '{"results":[]}' > results/regula-results.json

      # ‚úÖ Compliance Scans (AWS via Prowler, Steampipe)
      - name: Prowler AWS Compliance Scan
        if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'compliance-only'
        run: |
          git clone https://github.com/prowler-cloud/prowler
          cd prowler
          ./prowler aws --output json --output-file ../results/prowler-aws-results.json

      - name: Steampipe AWS Scan
        if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'compliance-only'
        run: |
          steampipe plugin install aws
          steampipe query "select * from aws_s3_bucket where acl = 'public-read'" --output json > results/steampipe-results.json

      # ‚úÖ AI Remediation + Compliance Explanation (AI-generated content)
      - name: AI Remediation & Compliance Explanation
        run: |
          python3 scripts/AI-Remediation.py \
            --trivy "results/trivy-*-results.json" \
            --checkov "results/checkov-results.json" \
            --client "${{ matrix.client }}" \
            --resource-group "${{ matrix.resource_group }}"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # ‚úÖ Ensure this secret is set in GitHub repo

      # ‚úÖ AI-Generated Policy-as-Code (OPA/Conftest)
      - name: AI-Generated Custom Policies
        run: |
          python3 scripts/AI-Policy-Generator.py \
            --ai "ai-remediation-results-${{ matrix.client }}.json" \
            --client "${{ matrix.client }}"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # ‚úÖ Upload AI-Generated Policies
      - name: Upload AI-Generated Policies
        uses: actions/upload-artifact@v4
        with:
          name: ai-policies-${{ matrix.client }}
          path: generated-policies/${{ matrix.client }}

      # ‚úÖ Final Report Generation and AI Summary (PDF format)
      - name: Generate Client Report (PDF)
        run: |
          python3 scripts/generate-report.py \
            --trivy "results/trivy-*-results.json" \
            --checkov "results/checkov-results.json" \
            --opa "results/opa-results.json" \
            --conftest "results/conftest-results.json" \
            --ai "ai-remediation-results-${{ matrix.client }}.json" \
            --client "${{ matrix.client }}" \
            --resource-group "${{ matrix.resource_group }}"
          weasyprint report/report.html report/report-${{ matrix.client }}.pdf

      # ‚úÖ Upload All Final Reports and Scan Results
      - name: Upload Security Report and Results
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ matrix.client }}
          path: |
            report/report-${{ matrix.client }}.pdf
            results/

# ================================================
# ‚öôÔ∏è REMINDERS FOR CLIENT ASSESSMENT:
# 1. Update matrix "client/resource_group" pairs for each new client.
# 2. Set OPENAI_API_KEY in GitHub repo secrets.
# 3. Select proper scan_type when launching (full, iac-only, compliance-only, etc.).
# 4. Update tool versions in download URLs only if necessary.
# 5. Customize report_template/security-report-template.html for branding.
# 6. Ensure results/ and generated-policies/ are in .gitignore to avoid committing.
# ================================================

