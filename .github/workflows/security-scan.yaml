name: Cloud Security Assessment Pipeline 

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Manual trigger for testing/clients
    inputs:
      client_name:
        description: 'Client name or environment (e.g., dev, staging, prod)'
        required: true
        default: 'test-client'
      resource_group:
        description: 'Azure Resource Group or AWS VPC/Project'
        required: true
        default: 'test-resource-group'

env:
  CLIENT_NAME: ${{ github.event.inputs.client_name }}
  RESOURCE_GROUP: ${{ github.event.inputs.resource_group }}

jobs:
  trivy-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.42.0

      - name: Container Scan
        run: |
          if [ -n "${{ vars.CLIENT_IMAGE }}" ]; then
            trivy image --format json --output trivy-container-results.json --severity CRITICAL,HIGH ${{ vars.CLIENT_IMAGE }}
          else
            echo "No CLIENT_IMAGE provided, skipping container scan"
            echo '{"Results":[]}' > trivy-container-results.json
          fi

      - name: IaC Scan
        run: |
          if [ -d "./iac" ]; then
            trivy config --severity CRITICAL,HIGH --format json --output trivy-iac-results.json ./iac/
          else
            echo "No iac directory found, skipping IaC scan"
            echo '{"Results":[]}' > trivy-iac-results.json
          fi

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-*-results.json

  checkov-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: IaC Policy Check
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./iac/
          output_format: json
          output_file_path: checkov-results.json

      - name: Upload Checkov results
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: checkov-results.json

  ai-remediation:
    runs-on: ubuntu-latest
    needs: [trivy-scan, checkov-scan]
    env:
      CLIENT_NAME: ${{ github.event.inputs.client_name }}
      RESOURCE_GROUP: ${{ github.event.inputs.resource_group }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          path: ./results

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Generate AI Fixes
        run: |
          pip install openai
          python3 scripts/AI-Remediation.py \
            --trivy "./results/trivy-results/trivy-*-results.json" \
            --checkov "./results/checkov-results/checkov-results.json" \
            --client "$CLIENT_NAME" \
            --resource-group "$RESOURCE_GROUP"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload remediation results
        uses: actions/upload-artifact@v4
        with:
          name: ai-remediation
          path: ai-remediation-*.json

  report:
    runs-on: ubuntu-latest
    needs: [ai-remediation]
    env:
      CLIENT_NAME: ${{ github.event.inputs.client_name }}
      RESOURCE_GROUP: ${{ github.event.inputs.resource_group }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install jinja2

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate Report
        run: |
          python3 scripts/generate-report.py \
            --trivy "./artifacts/trivy-results/trivy-*-results.json" \
            --checkov "./artifacts/checkov-results/checkov-results.json" \
            --remediation "./artifacts/ai-remediation/ai-remediation-*.json" \
            --client "$CLIENT_NAME" \
            --resource-group "$RESOURCE_GROUP"

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: report.html

