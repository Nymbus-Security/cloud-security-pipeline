name: Cloud Security Assessment Pipeline

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Scan Type (full, iac-only, compliance-only, container-only, policy-only)' # ✅ You can choose what to run
        required: true
        default: 'full'
      clients:
        description: 'Comma-separated list of client names (e.g., client-a,client-b)'
        required: true
        default: 'test-client'
      resource_groups:
        description: 'Comma-separated list of resource groups/projects matching clients (e.g., rg-a,rg-b)'
        required: true
        default: 'test-rg'

env:
  SCAN_TYPE: ${{ github.event.inputs.scan_type }}

jobs:
  security-scan:
    runs-on: ubuntu-latest

    # ✅ Matrix to run multiple clients and resource groups in parallel
    strategy:
      matrix:
        client: ${{ fromJson(format('["{0}"]', join('","', split(github.event.inputs.clients, ',')))) }}
        resource_group: ${{ fromJson(format('["{0}"]', join('","', split(github.event.inputs.resource_groups, ',')))) }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    # ✅ Install all required tools, adjust versions as needed
    - name: Install Tools (Trivy, OPA, Conftest, Python, WeasyPrint)
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.42.0
        curl -L https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz | tar xz && chmod +x conftest && mv conftest /usr/local/bin
        curl -sSL https://steampipe.io/install | sh
        sudo apt update && sudo apt install -y python3 python3-pip libpangocairo-1.0-0
        pip3 install openai weasyprint jinja2

    # ✅ Static analysis for Terraform, Kubernetes IaC using Checkov
    - name: Checkov IaC Security Scan
      if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'iac-only'
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: ./iac/
        output_format: json
        output_file_path: results/checkov-results.json

    # ✅ Regula for Terraform compliance (NIST, PCI, ISO, etc.)
    - name: Regula Terraform Compliance Scan
      if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'iac-only'
      run: |
        curl -sSL https://github.com/fugue/regula/releases/download/v3.1.0/regula-linux-amd64.tar.gz | tar xz
        ./regula run ./iac/ --format json > results/regula-results.json || echo '{"results":[]}' > results/regula-results.json

    # ✅ Prowler for AWS (or adjust to Azure/GCP)
    - name: Prowler AWS Compliance Scan
      if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'compliance-only'
      run: |
        git clone https://github.com/prowler-cloud/prowler
        cd prowler
        ./prowler aws --output json --output-file ../results/prowler-aws-results.json

    # ✅ Steampipe SQL queries for AWS compliance (customizable for Azure/GCP)
    - name: Steampipe AWS Scan
      if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'compliance-only'
      run: |
        steampipe plugin install aws
        steampipe query "select * from aws_s3_bucket where acl = 'public-read'" --output json > results/steampipe-results.json

    # ✅ AI Remediation and Compliance Mapping (Client-Specific)
    - name: AI Remediation & Compliance Explanation
      run: |
        python3 scripts/AI-Remediation.py \
          --trivy "results/trivy-*-results.json" \
          --checkov "results/checkov-results.json" \
          --client "${{ matrix.client }}" \
          --resource-group "${{ matrix.resource_group }}"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    # ✅ Generate professional PDF report for client
    - name: Generate Client Report (PDF)
      run: |
        python3 scripts/generate-report.py \
          --trivy "results/trivy-*-results.json" \
          --checkov "results/checkov-results.json" \
          --opa "results/opa-results.json" \
          --conftest "results/conftest-results.json" \
          --ai "ai-remediation-results-${{ matrix.client }}.json" \
          --client "${{ matrix.client }}" \
          --resource-group "${{ matrix.resource_group }}"
        weasyprint report/report.html report/report-${{ matrix.client }}.pdf

    # ✅ Upload final PDF report and raw results for review
    - name: Upload Security Report and Results
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ matrix.client }}
        path: |
          report/report-${{ matrix.client }}.pdf
          results/


  # -----------------------------------------------------------
  # Upload Artifacts
  # -----------------------------------------------------------
      - name: Upload Security Report PDF
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ matrix.client }}
          path: report/report-${CLIENT_NAME}.pdf

      - name: Upload Raw Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ matrix.client }}
          path: results/
