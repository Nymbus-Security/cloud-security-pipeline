name: Cloud Security Assessment Pipeline

on:
  workflow_dispatch:  # Manual trigger for client assessments
    inputs:
      scan_type:
        description: 'Scan Type (full, iac-only, compliance-only, container-only, policy-only)'
        required: true
        default: 'full'
      client_name:
        description: 'Client Name (e.g., client-a)'
        required: true
      resource_group:
        description: 'Azure Resource Group / AWS VPC / GCP Project'
        required: true

env:
  CLIENT_NAME: ${{ github.event.inputs.client_name }}
  RESOURCE_GROUP: ${{ github.event.inputs.resource_group }}
  SCAN_TYPE: ${{ github.event.inputs.scan_type }}

jobs:
  # -----------------------------------------------------------
  # Matrix-based parallel scan for multiple clients
  # -----------------------------------------------------------
  security-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        client: [${{ env.CLIENT_NAME }}]  # Can be expanded to multiple clients in future
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Tools (Trivy, OPA, Conftest, Python)
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.42.0
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64 && chmod +x opa && mv opa /usr/local/bin
          curl -L https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz | tar xz && chmod +x conftest && mv conftest /usr/local/bin
          sudo apt update && sudo apt install -y python3 python3-pip
          pip3 install openai weasyprint jinja2

  # -----------------------------------------------------------
  # IaC and Container Scans (Conditional)
  # -----------------------------------------------------------
      - name: Trivy IaC and Container Scan
        if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'iac-only' || env.SCAN_TYPE == 'container-only'
        run: |
          mkdir -p results
          if [ -d "./iac" ]; then
            trivy config --severity CRITICAL,HIGH --format json --output results/trivy-iac-results.json ./iac/
          else
            echo '{"Results":[]}' > results/trivy-iac-results.json
          fi
          if [ -n "${{ vars.CLIENT_IMAGE }}" ]; then
            trivy image --format json --output results/trivy-container-results.json --severity CRITICAL,HIGH ${{ vars.CLIENT_IMAGE }}
          else
            echo '{"Results":[]}' > results/trivy-container-results.json
          fi

  # -----------------------------------------------------------
  # Checkov IaC Policy Scan (Conditional)
  # -----------------------------------------------------------
      - name: Checkov Policy Scan
        if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'iac-only' || env.SCAN_TYPE == 'compliance-only'
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./iac/
          output_format: json
          output_file_path: results/checkov-results.json

  # -----------------------------------------------------------
  # Policy as Code: OPA and Conftest Scans (Conditional)
  # -----------------------------------------------------------
      - name: Policy-as-Code (OPA & Conftest)
        if: env.SCAN_TYPE == 'full' || env.SCAN_TYPE == 'policy-only'
        run: |
          mkdir -p results
          opa test ./iac/ --format=json > results/opa-results.json || echo '{"results":[]}' > results/opa-results.json
          conftest test ./iac/ --output json > results/conftest-results.json || echo '{"results":[]}' > results/conftest-results.json

  # -----------------------------------------------------------
  # AI Remediation & Compliance Recommendations
  # -----------------------------------------------------------
      - name: AI Remediation & Compliance Explanation
        if: env.SCAN_TYPE != 'policy-only'
        run: |
          mkdir -p scripts
          python3 scripts/AI-Remediation.py \
            --trivy "results/trivy-*-results.json" \
            --checkov "results/checkov-results.json" \
            --client "${CLIENT_NAME}" \
            --resource-group "${RESOURCE_GROUP}"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # -----------------------------------------------------------
  # Report Generation (HTML to PDF)
  # -----------------------------------------------------------
      - name: Generate Client Report (PDF)
        run: |
          mkdir -p report
          python3 scripts/generate-report.py \
            --trivy "results/trivy-*-results.json" \
            --checkov "results/checkov-results.json" \
            --opa "results/opa-results.json" \
            --conftest "results/conftest-results.json" \
            --ai "ai-remediation-results-${CLIENT_NAME}.json" \
            --client "${CLIENT_NAME}" \
            --resource-group "${RESOURCE_GROUP}"
          weasyprint report/report.html report/report-${CLIENT_NAME}.pdf

  # -----------------------------------------------------------
  # Upload Artifacts
  # -----------------------------------------------------------
      - name: Upload Security Report PDF
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ matrix.client }}
          path: report/report-${CLIENT_NAME}.pdf

      - name: Upload Raw Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ matrix.client }}
          path: results/
